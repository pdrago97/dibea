// Prisma schema for SQLite demo
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Simplified models for demo
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  name          String
  role          String   // ADMIN, FUNCIONARIO, VETERINARIO, CIDADAO
  municipalityId String? @map("municipality_id")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  animals       Animal[]
  adoptions     Adoption[]
  agentInteractions AgentInteraction[]

  @@map("users")
}

model Municipality {
  id        String   @id @default(uuid())
  name      String
  state     String
  email     String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  animals   Animal[]
  users     User[]

  @@map("municipalities")
}

model Animal {
  id            String   @id @default(uuid())
  name          String
  species       String   // CANINO, FELINO, OUTROS
  breed         String?
  sex           String   // MACHO, FEMEA
  age           Int?
  weight        Float?
  size          String?  // PEQUENO, MEDIO, GRANDE
  color         String?
  description   String?
  status        String   @default("DISPONIVEL") // DISPONIVEL, ADOTADO, TRATAMENTO, OBITO
  municipalityId String  @map("municipality_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  municipality  Municipality @relation(fields: [municipalityId], references: [id])
  adoptions     Adoption[]

  @@map("animals")
}

model Adoption {
  id        String   @id @default(uuid())
  animalId  String   @map("animal_id")
  tutorId   String   @map("tutor_id")
  status    String   @default("PENDENTE") // PENDENTE, APROVADA, REJEITADA
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  animal    Animal @relation(fields: [animalId], references: [id])
  tutor     User   @relation(fields: [tutorId], references: [id])

  @@map("adoptions")
}

model AgentInteraction {
  id               String    @id @default(uuid())
  userId           String?   @map("user_id")
  agentName        String    @map("agent_name")
  userInput        String    @map("user_input")
  agentResponse    String    @map("agent_response")
  responseTimeMs   Int       @map("response_time_ms")
  success          Boolean   @default(true)
  errorMessage     String?   @map("error_message")
  createdAt        DateTime  @default(now()) @map("created_at")

  // Relations
  user             User?     @relation(fields: [userId], references: [id])

  @@map("agent_interactions")
}

model AgentMetrics {
  id                     String   @id @default(uuid())
  agentName              String   @map("agent_name")
  date                   DateTime
  totalInteractions      Int      @default(0) @map("total_interactions")
  successfulInteractions Int      @default(0) @map("successful_interactions")
  averageResponseTime    Float    @default(0) @map("average_response_time")
  createdAt              DateTime @default(now()) @map("created_at")

  @@unique([agentName, date])
  @@map("agent_metrics")
}

model SystemAnalytics {
  id          String   @id @default(uuid())
  date        DateTime
  metricName  String   @map("metric_name")
  metricValue Float    @map("metric_value")
  createdAt   DateTime @default(now()) @map("created_at")

  @@unique([date, metricName])
  @@map("system_analytics")
}
