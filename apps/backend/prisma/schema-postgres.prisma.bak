// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  FUNCIONARIO
  VETERINARIO
  CIDADAO
}

enum AnimalSpecies {
  CANINO
  FELINO
  OUTROS
}

enum AnimalSex {
  MACHO
  FEMEA
}

enum AnimalSize {
  PEQUENO
  MEDIO
  GRANDE
}

enum AnimalStatus {
  DISPONIVEL
  ADOTADO
  TRATAMENTO
  OBITO
  PERDIDO
}

enum TutorStatus {
  ATIVO
  INATIVO
  BLACKLIST
}

enum HousingType {
  CASA
  APARTAMENTO
  SITIO
  OUTROS
}

enum AdoptionStatus {
  PENDENTE
  EM_ANALISE
  APROVADA
  REJEITADA
  CANCELADA
}

enum ComplaintStatus {
  ABERTA
  EM_ANDAMENTO
  RESOLVIDA
  FECHADA
}

enum ComplaintType {
  MAUS_TRATOS
  ABANDONO
  ANIMAL_PERDIDO
  OUTROS
}

enum CampaignType {
  CASTRACAO
  VACINACAO
  MICROCHIPAGEM
  ADOCAO
  OUTROS
}

enum AppointmentStatus {
  AGENDADO
  CONFIRMADO
  REALIZADO
  CANCELADO
  FALTOU
}

enum AppointmentType {
  ADOCAO
  CONSULTA
  CASTRACAO
  VACINACAO
  MICROCHIPAGEM
  OUTROS
}

// Main Entities
model Municipality {
  id            String   @id @default(uuid())
  name          String
  cnpj          String   @unique
  address       String
  phone         String?
  email         String?
  configurations Json?
  active        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  users         User[]
  animals       Animal[]
  tutors        Tutor[]
  rgas          RGA[]
  microchips    Microchip[]
  complaints    Complaint[]
  campaigns     Campaign[]

  @@map("municipalities")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  name         String
  phone        String?
  role         UserRole
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Foreign Keys
  municipalityId String @map("municipality_id")

  // Relations
  municipality Municipality @relation(fields: [municipalityId], references: [id])
  adoptions    Adoption[]
  complaints   Complaint[]
  appointments Appointment[]
  notifications Notification[]
  auditLogs    AuditLog[]
  whatsappConversations WhatsappConversation[]
  agentInteractions AgentInteraction[]

  @@map("users")
}

model Animal {
  id           String        @id @default(uuid())
  name         String
  species      AnimalSpecies
  breed        String?
  sex          AnimalSex
  size         AnimalSize
  birthDate    DateTime?     @map("birth_date")
  weight       Float?
  color        String?
  temperament  String?
  observations String?
  status       AnimalStatus  @default(DISPONIVEL)
  qrCode       String        @unique @map("qr_code")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // Foreign Keys
  municipalityId String  @map("municipality_id")
  microchipId    String? @unique @map("microchip_id")

  // Relations
  municipality    Municipality      @relation(fields: [municipalityId], references: [id])
  microchip       Microchip?        @relation(fields: [microchipId], references: [id])
  photos          AnimalPhoto[]
  medicalHistory  MedicalHistory[]
  adoptions       Adoption[]
  appointments    Appointment[]
  rgas            RGA[]

  @@map("animals")
}

model Tutor {
  id              String      @id @default(uuid())
  cpf             String      @unique
  rg              String?
  name            String
  email           String?
  phone           String
  fullAddress     String      @map("full_address")
  zipCode         String      @map("zip_code")
  city            String
  state           String
  housingType     HousingType @map("housing_type")
  hasExperience   Boolean     @default(false) @map("has_experience")
  observations    String?
  status          TutorStatus @default(ATIVO)
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Foreign Keys
  municipalityId String @map("municipality_id")

  // Relations
  municipality Municipality @relation(fields: [municipalityId], references: [id])
  adoptions    Adoption[]
  rgas         RGA[]
  appointments Appointment[]
  complaints   Complaint[]
  whatsappConversations WhatsappConversation[]

  @@map("tutors")
}

model Microchip {
  id              String    @id @default(uuid())
  number          String    @unique
  applicationDate DateTime? @map("application_date")
  veterinarian    String?
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Foreign Keys
  municipalityId String @map("municipality_id")

  // Relations
  municipality Municipality @relation(fields: [municipalityId], references: [id])
  animal       Animal?

  @@map("microchips")
}

model RGA {
  id           String    @id @default(uuid())
  number       String    @unique
  issueDate    DateTime  @map("issue_date")
  expiryDate   DateTime  @map("expiry_date")
  observations String?
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Foreign Keys
  animalId       String @map("animal_id")
  tutorId        String @map("tutor_id")
  municipalityId String @map("municipality_id")

  // Relations
  animal       Animal       @relation(fields: [animalId], references: [id])
  tutor        Tutor        @relation(fields: [tutorId], references: [id])
  municipality Municipality @relation(fields: [municipalityId], references: [id])

  @@map("rgas")
}

model Adoption {
  id            String         @id @default(uuid())
  requestDate   DateTime       @map("request_date")
  status        AdoptionStatus @default(PENDENTE)
  observations  String?
  approvalDate  DateTime?      @map("approval_date")
  rejectionDate DateTime?      @map("rejection_date")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  // Foreign Keys
  animalId String @map("animal_id")
  tutorId  String @map("tutor_id")
  userId   String @map("user_id")

  // Relations
  animal Animal @relation(fields: [animalId], references: [id])
  tutor  Tutor  @relation(fields: [tutorId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("adoptions")
}

model Complaint {
  id          String          @id @default(uuid())
  protocol    String          @unique
  type        ComplaintType
  description String
  location    String?
  latitude    Float?
  longitude   Float?
  status      ComplaintStatus @default(ABERTA)
  priority    Int             @default(1) // 1=baixa, 2=m√©dia, 3=alta, 4=urgente
  resolution  String?
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  // Foreign Keys
  tutorId        String? @map("tutor_id")
  userId         String? @map("user_id")
  municipalityId String  @map("municipality_id")

  // Relations
  tutor        Tutor?              @relation(fields: [tutorId], references: [id])
  user         User?               @relation(fields: [userId], references: [id])
  municipality Municipality       @relation(fields: [municipalityId], references: [id])
  documents    ComplaintDocument[]

  @@map("complaints")
}

model Campaign {
  id          String       @id @default(uuid())
  name        String
  type        CampaignType
  description String?
  startDate   DateTime     @map("start_date")
  endDate     DateTime     @map("end_date")
  slots       Int?
  location    String?
  active      Boolean      @default(true)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Foreign Keys
  municipalityId String @map("municipality_id")

  // Relations
  municipality Municipality  @relation(fields: [municipalityId], references: [id])
  appointments Appointment[]

  @@map("campaigns")
}

model Appointment {
  id           String            @id @default(uuid())
  type         AppointmentType
  dateTime     DateTime          @map("date_time")
  status       AppointmentStatus @default(AGENDADO)
  observations String?
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  // Foreign Keys
  tutorId    String? @map("tutor_id")
  animalId   String? @map("animal_id")
  userId     String? @map("user_id")
  campaignId String? @map("campaign_id")

  // Relations
  tutor    Tutor?    @relation(fields: [tutorId], references: [id])
  animal   Animal?   @relation(fields: [animalId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])
  campaign Campaign? @relation(fields: [campaignId], references: [id])

  @@map("appointments")
}

// Support Entities
model AnimalPhoto {
  id          String   @id @default(uuid())
  filename    String
  originalName String  @map("original_name")
  mimeType    String   @map("mime_type")
  size        Int
  url         String
  isPrimary   Boolean  @default(false) @map("is_primary")
  createdAt   DateTime @default(now()) @map("created_at")

  // Foreign Keys
  animalId String @map("animal_id")

  // Relations
  animal Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@map("animal_photos")
}

model MedicalHistory {
  id          String   @id @default(uuid())
  type        String   // "VACINA", "MEDICAMENTO", "PROCEDIMENTO", "EXAME"
  description String
  date        DateTime
  veterinarian String?
  observations String?
  createdAt   DateTime @default(now()) @map("created_at")

  // Foreign Keys
  animalId String @map("animal_id")

  // Relations
  animal Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@map("medical_history")
}

model ComplaintDocument {
  id          String   @id @default(uuid())
  filename    String
  originalName String  @map("original_name")
  mimeType    String   @map("mime_type")
  size        Int
  url         String
  createdAt   DateTime @default(now()) @map("created_at")

  // Foreign Keys
  complaintId String @map("complaint_id")

  // Relations
  complaint Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  @@map("complaint_documents")
}

model WhatsappConversation {
  id          String   @id @default(uuid())
  phoneNumber String   @map("phone_number")
  status      String   @default("ACTIVE") // ACTIVE, CLOSED, TRANSFERRED
  context     Json?    // Contexto da conversa para IA
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Foreign Keys
  tutorId String? @map("tutor_id")
  userId  String? @map("user_id")

  // Relations
  tutor    Tutor?              @relation(fields: [tutorId], references: [id])
  user     User?               @relation(fields: [userId], references: [id])
  messages WhatsappMessage[]

  @@map("whatsapp_conversations")
}

model WhatsappMessage {
  id           String   @id @default(uuid())
  messageId    String?  @map("message_id") // WhatsApp message ID
  direction    String   // INBOUND, OUTBOUND
  content      String
  messageType  String   @map("message_type") // TEXT, IMAGE, DOCUMENT, AUDIO
  mediaUrl     String?  @map("media_url")
  isFromBot    Boolean  @default(false) @map("is_from_bot")
  createdAt    DateTime @default(now()) @map("created_at")

  // Foreign Keys
  conversationId String @map("conversation_id")

  // Relations
  conversation WhatsappConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("whatsapp_messages")
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  type      String   // INFO, WARNING, ERROR, SUCCESS
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Foreign Keys
  userId String @map("user_id")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(uuid())
  tableName String   @map("table_name")
  operation String   // INSERT, UPDATE, DELETE
  oldData   Json?    @map("old_data")
  newData   Json?    @map("new_data")
  createdAt DateTime @default(now()) @map("created_at")

  // Foreign Keys
  userId String @map("user_id")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model AgentInteraction {
  id               String    @id @default(uuid())
  agentId          String    @map("agent_id")
  agentName        String    @map("agent_name")
  userId           String?   @map("user_id")
  sessionId        String?   @map("session_id")
  inputMessage     String    @map("input_message")
  outputMessage    String?   @map("output_message")
  success          Boolean   @default(true)
  responseTimeMs   Int       @map("response_time_ms")
  errorMessage     String?   @map("error_message")
  metadata         Json?
  createdAt        DateTime  @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([agentId])
  @@index([userId])
  @@index([createdAt])
  @@map("agent_interactions")
}

model AgentMetrics {
  id                     String    @id @default(uuid())
  agentId                String    @map("agent_id")
  agentName              String    @map("agent_name")
  date                   DateTime  @db.Date
  totalInteractions      Int       @default(0) @map("total_interactions")
  successfulInteractions Int       @default(0) @map("successful_interactions")
  failedInteractions     Int       @default(0) @map("failed_interactions")
  avgResponseTimeMs      Float     @default(0) @map("avg_response_time_ms")
  lastActivity           DateTime? @map("last_activity")
  status                 String    @default("online")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  @@unique([agentId, date])
  @@map("agent_metrics")
}

model SystemAnalytics {
  id          String   @id @default(uuid())
  date        DateTime @db.Date
  metricName  String   @map("metric_name")
  metricValue Float    @map("metric_value")
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")

  @@unique([date, metricName])
  @@map("system_analytics")
}

// Indexes for better performance
// These are automatically created by Prisma for foreign keys and unique fields
// Additional indexes can be added here if needed
