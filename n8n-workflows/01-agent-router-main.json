{
  "name": "DIBEA Agent Router - Main Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "dibea-agent",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Input",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "text": "={{ $json.userInput }}",
        "options": {
          "systemMessage": "Você é um roteador inteligente para o sistema veterinário municipal DIBEA.\n\nSua função é analisar a entrada do usuário e determinar qual agente especializado deve processar a solicitação.\n\nAgentes disponíveis:\n- ANIMAL_AGENT: Para cadastro, atualização ou consultas sobre animais\n- PROCEDURE_AGENT: Para procedimentos veterinários, vacinas, cirurgias, consultas\n- DOCUMENT_AGENT: Para upload e processamento de documentos\n- TUTOR_AGENT: Para cadastro e gestão de tutores/adotantes\n- GENERAL_AGENT: Para consultas gerais, relatórios, estatísticas\n\nExemplos de entrada e roteamento:\n- \"Acabei de vacinar o Rex\" → PROCEDURE_AGENT\n- \"Quero cadastrar um novo cão\" → ANIMAL_AGENT\n- \"Preciso fazer upload de um laudo\" → DOCUMENT_AGENT\n- \"João quer adotar um gato\" → TUTOR_AGENT\n- \"Quantos animais foram adotados este mês?\" → GENERAL_AGENT\n\nRetorne APENAS um JSON com:\n{\n  \"agent\": \"NOME_DO_AGENTE\",\n  \"userInput\": \"entrada original do usuário\",\n  \"context\": \"contexto extraído relevante\",\n  \"confidence\": 0.95\n}"
        }
      },
      "id": "intent-analyzer",
      "name": "Intent Analyzer",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "temperature": 0.1,
          "maxTokens": 500
        }
      },
      "id": "openai-model",
      "name": "OpenAI GPT-4o Mini",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [460, 480]
    },
    {
      "parameters": {
        "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"agent\": {\n      \"type\": \"string\",\n      \"enum\": [\"ANIMAL_AGENT\", \"PROCEDURE_AGENT\", \"DOCUMENT_AGENT\", \"TUTOR_AGENT\", \"GENERAL_AGENT\"]\n    },\n    \"userInput\": {\n      \"type\": \"string\"\n    },\n    \"context\": {\n      \"type\": \"string\"\n    },\n    \"confidence\": {\n      \"type\": \"number\",\n      \"minimum\": 0,\n      \"maximum\": 1\n    }\n  },\n  \"required\": [\"agent\", \"userInput\", \"context\", \"confidence\"]\n}"
      },
      "id": "output-parser",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "={{ $json.agent }}",
                  "operation": "equal",
                  "rightValue": "ANIMAL_AGENT"
                }
              },
              "renameOutput": true,
              "outputKey": "animal"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "={{ $json.agent }}",
                  "operation": "equal",
                  "rightValue": "PROCEDURE_AGENT"
                }
              },
              "renameOutput": true,
              "outputKey": "procedure"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "={{ $json.agent }}",
                  "operation": "equal",
                  "rightValue": "DOCUMENT_AGENT"
                }
              },
              "renameOutput": true,
              "outputKey": "document"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "={{ $json.agent }}",
                  "operation": "equal",
                  "rightValue": "TUTOR_AGENT"
                }
              },
              "renameOutput": true,
              "outputKey": "tutor"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "={{ $json.agent }}",
                  "operation": "equal",
                  "rightValue": "GENERAL_AGENT"
                }
              },
              "renameOutput": true,
              "outputKey": "general"
            }
          ]
        },
        "options": {
          "fallbackOutput": "manual",
          "allMatchingOutputs": false
        },
        "fallbackOutput": "unknown"
      },
      "id": "agent-router",
      "name": "Agent Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [900, 300]
    },
    {
      "parameters": {
        "workflowId": "{{ $workflow.id }}-animal-agent",
        "waitForExecution": true,
        "source": "parameter",
        "workflowInputData": "={{ $json }}"
      },
      "id": "call-animal-agent",
      "name": "Call Animal Agent",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [1120, 180]
    },
    {
      "parameters": {
        "workflowId": "{{ $workflow.id }}-procedure-agent",
        "waitForExecution": true,
        "source": "parameter",
        "workflowInputData": "={{ $json }}"
      },
      "id": "call-procedure-agent",
      "name": "Call Procedure Agent",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [1120, 260]
    },
    {
      "parameters": {
        "workflowId": "{{ $workflow.id }}-document-agent",
        "waitForExecution": true,
        "source": "parameter",
        "workflowInputData": "={{ $json }}"
      },
      "id": "call-document-agent",
      "name": "Call Document Agent",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [1120, 340]
    },
    {
      "parameters": {
        "workflowId": "{{ $workflow.id }}-tutor-agent",
        "waitForExecution": true,
        "source": "parameter",
        "workflowInputData": "={{ $json }}"
      },
      "id": "call-tutor-agent",
      "name": "Call Tutor Agent",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [1120, 420]
    },
    {
      "parameters": {
        "workflowId": "{{ $workflow.id }}-general-agent",
        "waitForExecution": true,
        "source": "parameter",
        "workflowInputData": "={{ $json }}"
      },
      "id": "call-general-agent",
      "name": "Call General Agent",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 300]
    }
  ],
  "connections": {
    "Webhook Input": {
      "main": [
        [
          {
            "node": "Intent Analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intent Analyzer": {
      "main": [
        [
          {
            "node": "Structured Output Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI GPT-4o Mini": {
      "ai_languageModel": [
        [
          {
            "node": "Intent Analyzer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Intent Analyzer",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ],
      "main": [
        [
          {
            "node": "Agent Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent Router": {
      "main": [
        [
          {
            "node": "Call Animal Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call Procedure Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call Document Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call Tutor Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call General Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Animal Agent": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Procedure Agent": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Document Agent": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Tutor Agent": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call General Agent": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["dibea", "veterinary", "ai-agents"],
  "triggerCount": 1,
  "updatedAt": "2025-01-27T00:00:00.000Z",
  "versionId": "1"
}
