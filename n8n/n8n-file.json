{
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -2720,
        -48
      ],
      "id": "c3cf3368-87a8-4f94-b150-392ce842dec2",
      "name": "When chat message received",
      "webhookId": "dcfad7e3-e957-47e0-a5e5-7f6ecb400a54"
    },
    {
      "parameters": {
        "jsCode": "// ========================================\n// EXTRACT CONTEXT NODE - DIBEA\n// ========================================\n// Extrai contexto do usu√°rio da requisi√ß√£o\n\nconst body = $json.body || $json;\n\n// Extrai dados do contexto\nconst context = body.context || {};\nconst userId = context.userId || body.userId || 'anonymous';\nconst userRole = context.userRole || body.userRole || 'USUARIO';\nconst municipalityId = context.municipality?.id || context.municipalityId || null;\nconst municipalityName = context.municipality?.name || context.municipalityName || null;\n\n// Gera sessionId √∫nico por usu√°rio\nconst sessionId = context.sessionId || body.sessionId || `session-${userId}-${Date.now()}`;\n\n// Extrai mensagem do chat\nconst chatInput = body.chatInput || body.userInput || body.message || '';\n\n// Retorna contexto estruturado\nreturn {\n  json: {\n    chatInput: chatInput,\n    sessionId: sessionId,\n    userId: userId,\n    userRole: userRole,\n    municipalityId: municipalityId,\n    municipalityName: municipalityName,\n    isTutor: context.isTutor || false,\n    tutorApproved: context.tutorApproved || false,\n    previousMessages: context.previousMessages || [],\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2480,
        144
      ],
      "id": "extract-context-node",
      "name": "Extract Context"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.userRole }}",
                    "rightValue": "USUARIO",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-usuario"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.userRole }}",
                    "rightValue": "TUTOR",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-tutor"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.userRole }}",
                    "rightValue": "VETERINARIO",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-veterinario"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.userRole }}",
                    "rightValue": "ADMIN",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "route-admin"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -2240,
        144
      ],
      "id": "route-by-role-switch",
      "name": "Route by Role"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Voc√™ √© o assistente do DIBEA para USU√ÅRIOS B√ÅSICOS.\n\nüë§ PERFIL DO USU√ÅRIO: {{ $('Extract Context').item.json.userRole }}\nüìç Munic√≠pio: {{ $('Extract Context').item.json.municipalityName || 'N√£o informado' }}\n\nüîç FUN√á√ïES PERMITIDAS:\n\n‚úÖ CONSULTAS (QUERY):\n- search_animals_text: Buscar animais dispon√≠veis\n- get_animal_details: Ver detalhes de um animal\n- get_adoption_stats: Ver estat√≠sticas\n\n‚úÖ A√á√ïES LIMITADAS (ACTION):\n- request_tutor_approval: Solicitar aprova√ß√£o para se tornar tutor\n- check_tutor_status: Verificar status da solicita√ß√£o\n\n‚ùå A√á√ïES BLOQUEADAS:\n- create_animal (apenas tutores aprovados)\n- create_adoption (apenas tutores aprovados)\n- create_appointment (apenas tutores aprovados)\n\nüí¨ ESTILO DE COMUNICA√á√ÉO:\n- Amig√°vel e acolhedor\n- Incentive o usu√°rio a se tornar tutor para adotar\n- Explique o processo de aprova√ß√£o\n- Mostre os animais dispon√≠veis\n\nüìã RESPOSTA JSON:\n{\n  \"intent\": \"QUERY\",\n  \"function\": \"search_animals_text\",\n  \"endpoint\": null,\n  \"parameters\": {...},\n  \"user_message\": \"{{ $json.chatInput }}\"\n}\n\nMensagem do usu√°rio: {{ $json.chatInput }}",
        "needsFallback": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2000,
        -80
      ],
      "id": "usuario-agent",
      "name": "USUARIO Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Voc√™ √© o assistente do DIBEA para TUTORES APROVADOS.\n\nüë§ PERFIL DO USU√ÅRIO: {{ $('Extract Context').item.json.userRole }}\n‚úÖ Status: TUTOR APROVADO\nüìç Munic√≠pio: {{ $('Extract Context').item.json.municipalityName || 'N√£o informado' }}\n\nüîç FUN√á√ïES PERMITIDAS:\n\n‚úÖ CONSULTAS (QUERY):\n- search_animals_text: Buscar animais\n- get_animal_details: Ver detalhes\n- get_adoption_stats: Estat√≠sticas\n\n‚úÖ A√á√ïES COMPLETAS (ACTION):\n- create_animal: Cadastrar animal para doa√ß√£o\n- create_adoption: Iniciar processo de ado√ß√£o\n- create_appointment: Agendar visitas\n- update_adoption_status: Atualizar status\n\n‚ùå A√á√ïES BLOQUEADAS:\n- register_procedure (apenas veterin√°rios)\n- approve_tutor (apenas admins)\n\nüí¨ ESTILO DE COMUNICA√á√ÉO:\n- Profissional e prestativo\n- Parabenize por ser tutor aprovado\n- Facilite o processo de ado√ß√£o\n- Ofere√ßa ajuda para cadastrar animais\n\nüìã RESPOSTA JSON:\n{\n  \"intent\": \"ACTION\",\n  \"function\": \"create_adoption\",\n  \"endpoint\": \"adoptions\",\n  \"parameters\": {...},\n  \"user_message\": \"{{ $json.chatInput }}\"\n}\n\nMensagem do usu√°rio: {{ $json.chatInput }}",
        "needsFallback": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2000,
        80
      ],
      "id": "tutor-agent",
      "name": "TUTOR Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Voc√™ √© o assistente do DIBEA para VETERIN√ÅRIOS.\n\nüë®‚Äç‚öïÔ∏è PERFIL DO USU√ÅRIO: {{ $('Extract Context').item.json.userRole }}\nüìç Munic√≠pio: {{ $('Extract Context').item.json.municipalityName || 'N√£o informado' }}\n\nüîç FUN√á√ïES PERMITIDAS:\n\n‚úÖ CONSULTAS (QUERY):\n- search_animals_text: Buscar animais\n- get_animal_details: Ver detalhes m√©dicos\n- get_health_stats: Estat√≠sticas de sa√∫de\n\n‚úÖ A√á√ïES VETERIN√ÅRIAS (ACTION):\n- create_animal: Cadastrar animal resgatado\n- register_procedure: Registrar procedimento m√©dico\n- update_health_status: Atualizar estado de sa√∫de\n- schedule_consultation: Agendar consulta\n- approve_adoption_medical: Aprovar ado√ß√£o (aspecto m√©dico)\n\n‚ùå A√á√ïES BLOQUEADAS:\n- approve_tutor (apenas admins)\n- delete_animal (apenas admins)\n\nüí¨ ESTILO DE COMUNICA√á√ÉO:\n- T√©cnico mas acess√≠vel\n- Foco em sa√∫de e bem-estar animal\n- Solicite informa√ß√µes m√©dicas completas\n- Sugira pr√≥ximos passos de tratamento\n\nüìã RESPOSTA JSON:\n{\n  \"intent\": \"ACTION\",\n  \"function\": \"register_procedure\",\n  \"endpoint\": \"procedures\",\n  \"parameters\": {...},\n  \"user_message\": \"{{ $json.chatInput }}\"\n}\n\nMensagem do usu√°rio: {{ $json.chatInput }}",
        "needsFallback": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2000,
        240
      ],
      "id": "veterinario-agent",
      "name": "VETERINARIO Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Voc√™ √© o assistente do DIBEA para ADMINISTRADORES.\n\nüë®‚Äçüíº PERFIL DO USU√ÅRIO: {{ $('Extract Context').item.json.userRole }}\nüîë Acesso: TOTAL\nüìç Munic√≠pio: {{ $('Extract Context').item.json.municipalityName || 'Todos' }}\n\nüîç FUN√á√ïES PERMITIDAS:\n\n‚úÖ TODAS AS CONSULTAS (QUERY):\n- search_animals_text\n- get_animal_details\n- get_adoption_stats\n- get_system_stats\n- audit_logs\n\n‚úÖ TODAS AS A√á√ïES (ACTION):\n- approve_tutor: Aprovar usu√°rio como tutor\n- manage_users: Gerenciar usu√°rios\n- create_animal: Cadastrar animais\n- delete_animal: Remover animais\n- generate_reports: Gerar relat√≥rios\n- export_data: Exportar dados\n- system_config: Configurar sistema\n\nüí¨ ESTILO DE COMUNICA√á√ÉO:\n- Profissional e eficiente\n- Foco em dados e m√©tricas\n- Sugerir a√ß√µes estrat√©gicas\n- Alertar sobre problemas\n\nüìã RESPOSTA JSON:\n{\n  \"intent\": \"ACTION\",\n  \"function\": \"approve_tutor\",\n  \"endpoint\": \"tutors/approve\",\n  \"parameters\": {...},\n  \"user_message\": \"{{ $json.chatInput }}\"\n}\n\nMensagem do usu√°rio: {{ $json.chatInput }}",
        "needsFallback": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2000,
        400
      ],
      "id": "admin-agent",
      "name": "ADMIN Agent"
    },
    {
      "parameters": {
        "jsCode": "// Parse a resposta do SMART AGENT\nconst agentResponse = $input.first().json;\n\n// Se j√° for um objeto, use diretamente\nlet parsed = agentResponse;\n\n// Se for string, fa√ßa parse\nif (typeof agentResponse.output === 'string') {\n  try {\n    parsed = JSON.parse(agentResponse.output);\n  } catch (e) {\n    // Se falhar, tente extrair JSON da string\n    const jsonMatch = agentResponse.output.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      parsed = JSON.parse(jsonMatch[0]);\n    } else {\n      throw new Error('N√£o foi poss√≠vel extrair JSON da resposta');\n    }\n  }\n} else if (agentResponse.output && typeof agentResponse.output === 'object') {\n  parsed = agentResponse.output;\n}\n\n// Retorna o objeto processado\nreturn {\n  json: {\n    intent: parsed.intent,\n    function: parsed.function,\n    endpoint: parsed.endpoint,\n    parameters: parsed.parameters,\n    user_message: parsed.user_message\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2032,
        48
      ],
      "id": "da346bdf-fe21-4aad-95c5-fc5761eed8b9",
      "name": "Process Agent Response"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o4-mini",
          "mode": "list",
          "cachedResultName": "o4-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1536,
        464
      ],
      "id": "af0dca49-27d1-4dd2-99a2-522a4e094fa7",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "lJGvrImn2WUYPuNE",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "expressionKey",
        "sessionKey": "={{ $('Extract Context').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -1408,
        464
      ],
      "id": "74861581-e406-48c4-a51a-ac6791f26cee",
      "name": "Postgres Chat Memory9",
      "credentials": {
        "postgres": {
          "id": "2VVxWLQMsytxBsoP",
          "name": "Postgres account 4"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "d0fff20e-124c-49f3-8ccf-a615504c5fc1",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -2720,
        144
      ],
      "id": "085ff0e6-e210-4494-bf83-b195274efda2",
      "name": "Webhook2",
      "webhookId": "d0fff20e-124c-49f3-8ccf-a615504c5fc1"
    },
    {
      "parameters": {
        "model": "grok-4-fast-reasoning",
        "options": {
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatXAiGrok",
      "typeVersion": 1,
      "position": [
        -1664,
        464
      ],
      "id": "661b9fb3-4c7e-4505-9a05-60e8c1be3451",
      "name": "xAI Grok Chat Model9",
      "credentials": {
        "xAiApi": {
          "id": "8tCzajYEvYL87Rmj",
          "name": "xAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "=POST",
        "url": "={{ $credentials.supabaseApi.host }}/rest/v1/rpc/{{ $json.function }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.parameters) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1552,
        -128
      ],
      "id": "cb158788-d03f-4429-a464-349110b2916c",
      "name": "HTTP Request3",
      "credentials": {
        "supabaseApi": {
          "id": "mrRLeoHwNIEKek1I",
          "name": "DIBEASUPABASE"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $credentials.supabaseApi.host }}/rest/v1/{{ $json.endpoint }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            },
            {
              "name": "Authorization",
              "value": "={{ $credentials.supabaseApi.serviceRole }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.parameters) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1552,
        208
      ],
      "id": "d8bf4a80-eba1-4dfb-a46a-fcdfd7a9a22e",
      "name": "HTTP Request4",
      "credentials": {
        "supabaseApi": {
          "id": "mrRLeoHwNIEKek1I",
          "name": "DIBEASUPABASE"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -400,
        16
      ],
      "id": "d2fb0010-3682-4b14-af13-c87047726b4d",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Voc√™ √© o assistente inteligente do DIBEA - Sistema Municipal de Bem-Estar Animal.\n\nCAPACIDADES DISPON√çVEIS:\n\nüîç CONSULTAS (via Supabase Functions):\n- search_animals_text: Buscar animais com filtros\n  Par√¢metros: {\"search_query\": \"texto\", \"species_filter\": \"CANINO|FELINO|all\", \"size_filter\": \"PEQUENO|MEDIO|GRANDE|all\", \"municipality_filter\": \"cidade\", \"limit_count\": 10}\n\n- get_animal_details: Detalhes espec√≠ficos de um animal\n  Par√¢metros: {\"animal_id\": \"uuid\"}\n\n- get_adoption_stats: Estat√≠sticas de ado√ß√£o\n  Par√¢metros: {\"municipality_filter\": null, \"period_days\": 30}\n\n- search_municipalities: Buscar munic√≠pios\n  Par√¢metros: {\"search_query\": \"nome\", \"state_filter\": \"SP\"}\n\nüéØ A√á√ïES (via Supabase REST API):\n‚ö†Ô∏è IMPORTANTE: Use snake_case para nomes de campos (municipality_id, animal_id, etc.)\n\n- create_animal: Cadastrar novo animal\n  Endpoint: animals\n  Par√¢metros: {\"name\": \"nome\", \"species\": \"CANINO|FELINO\", \"breed\": \"ra√ßa\", \"sex\": \"MACHO|FEMEA\", \"size\": \"PEQUENO|MEDIO|GRANDE\", \"municipality_id\": \"0b227971-5134-4992-b83c-b4f35cabb1c0\"}\n\n- create_adoption: Iniciar processo de ado√ß√£o\n  Endpoint: adoptions\n  Par√¢metros: {\"animal_id\": \"uuid\", \"tutor_id\": \"uuid\", \"observations\": \"texto\"}\n\n- create_appointment: Agendar consulta/visita\n  Endpoint: appointments\n  Par√¢metros: {\"type\": \"VISITA_ADOCAO|CONSULTA\", \"date_time\": \"ISO8601\", \"tutor_id\": \"uuid\", \"animal_id\": \"uuid\"}\n\n- create_tutor: Cadastrar novo tutor\n  Endpoint: tutors\n  Par√¢metros: {\"name\": \"nome\", \"cpf\": \"cpf\", \"email\": \"email\", \"phone\": \"telefone\", \"municipality_id\": \"0b227971-5134-4992-b83c-b4f35cabb1c0\"}\n\nESTRAT√âGIA DE DECIS√ÉO:\n1. Analise a inten√ß√£o do usu√°rio\n2. Determine se √© CONSULTA (QUERY) ou A√á√ÉO (ACTION)\n3. Escolha a fun√ß√£o apropriada\n4. Extraia e formate os par√¢metros\n\nEXEMPLOS:\n- \"Quero um c√£o pequeno\" ‚Üí QUERY: search_animals_text\n- \"Cadastrar novo cachorro chamado Rex\" ‚Üí ACTION: create_animal\n- \"Marcar visita para ado√ß√£o\" ‚Üí ACTION: create_appointment\n- \"Quantos animais dispon√≠veis?\" ‚Üí QUERY: get_adoption_stats\n\nSEMPRE responda em JSON v√°lido:\n{\n  \"intent\": \"QUERY\",\n  \"function\": \"search_animals_text\",\n  \"endpoint\": null,\n  \"parameters\": {\n    \"search_query\": \"\",\n    \"species_filter\": \"CANINO\",\n    \"size_filter\": \"PEQUENO\",\n    \"municipality_filter\": null,\n    \"limit_count\": 10\n  },\n  \"user_message\": \"mensagem original do usu√°rio\"\n}\n\nOU para a√ß√µes:\n{\n  \"intent\": \"ACTION\",\n  \"function\": \"create_animal\",\n  \"endpoint\": \"animals\",\n  \"parameters\": {\n    \"name\": \"Rex\",\n    \"species\": \"CANINO\",\n    \"breed\": \"Labrador\",\n    \"sex\": \"MACHO\",\n    \"size\": \"GRANDE\",\n    \"municipality_id\": \"0b227971-5134-4992-b83c-b4f35cabb1c0\"\n  },\n  \"user_message\": \"mensagem original do usu√°rio\"\n}\n\nPara a mensagem recebida pelo chat de atendimento >>>>>\n\n{{ $json.chatInput }} OR ",
        "needsFallback": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2432,
        48
      ],
      "id": "e5656a66-c3f4-4f6d-b637-c77a3e11dff9",
      "name": "SMART AGENT1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=‚ö†Ô∏è REGRA CR√çTICA: USE APENAS OS DADOS DO JSON ABAIXO. N√ÉO INVENTE INFORMA√á√ïES.\n\nüìä DADOS REAIS DO SISTEMA DIBEA:\n```json\n{{ JSON.stringify($json, null, 2) }}\n```\n\n---\n\nüéØ SUA TAREFA:\nVoc√™ √© o assistente do DIBEA. Recebeu dados formatados do sistema e deve gerar uma resposta natural e √∫til.\n\nüìù INFORMA√á√ïES DISPON√çVEIS:\n- Mensagem do usu√°rio: {{ $json.user_message }}\n- Tipo de opera√ß√£o: {{ $json.intent }}\n- Fun√ß√£o executada: {{ $json.function }}\n- Status: {{ $json.success }}\n- Resumo: {{ $json.summary }}\n- Quantidade: {{ $json.count }}\n- Dados: (veja o JSON completo acima)\n\n‚ùå PROIBIDO:\n- Inventar n√∫meros ou dados que n√£o est√£o no JSON\n- Adicionar informa√ß√µes n√£o presentes nos dados\n- Usar conhecimento pr√©vio ou exemplos fict√≠cios\n- Mencionar valores que n√£o aparecem no JSON acima\n\n‚úÖ OBRIGAT√ìRIO:\n- Use APENAS os dados do JSON fornecido\n- Se um n√∫mero est√° no JSON, use esse n√∫mero EXATO\n- Se uma informa√ß√£o N√ÉO est√° no JSON, N√ÉO mencione\n- Seja emp√°tico e prestativo\n- Use linguagem natural e conversacional\n- Use emojis quando apropriado üêï üê±\n\nüí° DIRETRIZES POR TIPO DE OPERA√á√ÉO:\n\n**CONSULTAS (intent: QUERY):**\n- Se success=true e count>0: Liste os resultados encontrados usando os dados do JSON\n- Se success=true e count=0: Informe que n√£o encontrou e sugira alternativas\n- Para estat√≠sticas: Apresente os n√∫meros EXATOS do campo \"data\"\n- Para lista de animais: Mencione nome, esp√©cie, ra√ßa, porte (dados do JSON)\n\n**A√á√ïES (intent: ACTION):**\n- Se success=true: Confirme a a√ß√£o e mencione IDs/c√≥digos do JSON\n- Se success=false: Explique o erro usando os dados do campo \"data.error\"\n- Sugira pr√≥ximos passos quando apropriado\n\nüìã EXEMPLOS DE COMO USAR OS DADOS:\n\n**Exemplo 1 - Estat√≠sticas:**\nSe o JSON cont√©m:\n```json\n{\n  \"data\": {\n    \"total_animals\": 4,\n    \"available_animals\": 3,\n    \"adopted_animals\": 1\n  }\n}\n```\nResposta CORRETA: \"No momento temos 4 animais no sistema, sendo 3 dispon√≠veis para ado√ß√£o e 1 j√° adotado! üêæ\"\nResposta ERRADA: \"Temos 250 animais...\" ‚ùå (inventou n√∫mero)\n\n**Exemplo 2 - Lista de animais:**\nSe o JSON cont√©m:\n```json\n{\n  \"count\": 2,\n  \"data\": [\n    {\"name\": \"Rex\", \"species\": \"CANINO\", \"size\": \"GRANDE\"},\n    {\"name\": \"Luna\", \"species\": \"CANINO\", \"size\": \"PEQUENO\"}\n  ]\n}\n```\nResposta CORRETA: \"Encontrei 2 c√£es! Rex (porte grande) e Luna (porte pequeno). üêï\"\nResposta ERRADA: \"Encontrei 5 c√£es...\" ‚ùå (inventou n√∫mero)\n\n**Exemplo 3 - Sem resultados:**\nSe o JSON cont√©m:\n```json\n{\n  \"count\": 0,\n  \"data\": []\n}\n```\nResposta CORRETA: \"N√£o encontrei animais com essas caracter√≠sticas no momento. Quer ver outras op√ß√µes? üòä\"\n\nüöÄ AGORA GERE SUA RESPOSTA USANDO EXCLUSIVAMENTE OS DADOS DO JSON ACIMA:",
        "needsFallback": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -720,
        16
      ],
      "id": "f00879ce-0a57-4579-9b77-9b8bb036c3d3",
      "name": "SMART AGENT2"
    },
    {
      "parameters": {
        "jsCode": "// ========================================\n// FORMAT RESPONSE NODE - DIBEA\n// ========================================\n// Este c√≥digo formata os outputs dos HTTP Requests\n// para um formato consistente que o SMART AGENT1 pode processar\n\nconst input = $input.first().json;\nconst previousNode = $input.first().node;\n\n// Pega a mensagem original do usu√°rio\nconst userMessage = $('Process Agent Response').item.json.user_message || 'Consulta do usu√°rio';\nconst intent = $('Process Agent Response').item.json.intent;\nconst functionName = $('Process Agent Response').item.json.function;\n\n// Inicializa o objeto de resposta formatada\nlet formattedResponse = {\n  user_message: userMessage,\n  intent: intent,\n  function: functionName,\n  data: null,\n  summary: '',\n  count: 0,\n  success: false\n};\n\n// ========================================\n// FORMATAR RESPOSTA DO SUPABASE\n// ========================================\nif (intent === 'QUERY') {\n  \n  // Verifica se √© um array de resultados\n  if (Array.isArray(input)) {\n    formattedResponse.success = true;\n    formattedResponse.data = input;\n    formattedResponse.count = input.length;\n    \n    // Gera summary baseado na fun√ß√£o\n    if (functionName === 'search_animals_text') {\n      formattedResponse.summary = `Encontrados ${input.length} animais`;\n      \n      // Adiciona detalhes dos animais\n      if (input.length > 0) {\n        const animals = input.map(a => ({\n          id: a.id,\n          name: a.name || 'Sem nome',\n          species: a.species,\n          breed: a.breed || 'SRD',\n          sex: a.sex,\n          size: a.size,\n          age: a.age,\n          status: a.status,\n          description: a.description\n        }));\n        formattedResponse.data = animals;\n      }\n      \n    } else if (functionName === 'get_adoption_stats') {\n      formattedResponse.summary = 'Estat√≠sticas de ado√ß√£o';\n      \n      // Formata estat√≠sticas\n      if (input.length > 0) {\n        const stats = input[0];\n        formattedResponse.data = {\n          total_animals: stats.total_animals || 0,\n          available: stats.available || 0,\n          adopted: stats.adopted || 0,\n          in_treatment: stats.in_treatment || 0,\n          by_species: stats.by_species || [],\n          by_size: stats.by_size || []\n        };\n        formattedResponse.summary = `Total: ${stats.total_animals || 0} animais`;\n      }\n      \n    } else if (functionName === 'search_municipalities') {\n      formattedResponse.summary = `Encontrados ${input.length} munic√≠pios`;\n      \n      if (input.length > 0) {\n        const municipalities = input.map(m => ({\n          id: m.id,\n          name: m.name,\n          state: m.state,\n          active: m.active\n        }));\n        formattedResponse.data = municipalities;\n      }\n      \n    } else if (functionName === 'get_animal_details') {\n      formattedResponse.summary = 'Detalhes do animal';\n      \n      if (input.length > 0) {\n        const animal = input[0];\n        formattedResponse.data = {\n          id: animal.id,\n          name: animal.name || 'Sem nome',\n          species: animal.species,\n          breed: animal.breed || 'SRD',\n          sex: animal.sex,\n          size: animal.size,\n          age: animal.age,\n          weight: animal.weight,\n          color: animal.color,\n          temperament: animal.temperament,\n          status: animal.status,\n          description: animal.description,\n          municipality: animal.municipality_name\n        };\n      }\n    }\n    \n  } else if (typeof input === 'object') {\n    // Resposta √∫nica (objeto)\n    formattedResponse.success = true;\n    formattedResponse.data = input;\n    formattedResponse.count = 1;\n    formattedResponse.summary = 'Resultado encontrado';\n  } else {\n    // Erro ou resposta vazia\n    formattedResponse.success = false;\n    formattedResponse.summary = 'Nenhum resultado encontrado';\n  }\n}\n\n// ========================================\n// FORMATAR RESPOSTA DA DIBEA API\n// ========================================\nelse if (intent === 'ACTION') {\n  \n  // Verifica se a a√ß√£o foi bem-sucedida\n  if (input.success || input.id || input.data) {\n    formattedResponse.success = true;\n    \n    // Extrai dados relevantes\n    const responseData = input.data || input;\n    \n    if (functionName === 'create_animal') {\n      formattedResponse.summary = `Animal cadastrado com sucesso`;\n      formattedResponse.data = {\n        id: responseData.id,\n        name: responseData.name,\n        species: responseData.species,\n        breed: responseData.breed,\n        qrCode: responseData.qrCode || responseData.qr_code,\n        message: 'Animal cadastrado e dispon√≠vel para ado√ß√£o'\n      };\n      \n    } else if (functionName === 'create_adoption') {\n      formattedResponse.summary = `Processo de ado√ß√£o iniciado`;\n      formattedResponse.data = {\n        id: responseData.id,\n        animalId: responseData.animalId || responseData.animal_id,\n        tutorId: responseData.tutorId || responseData.tutor_id,\n        status: responseData.status,\n        message: 'Processo de ado√ß√£o criado com sucesso'\n      };\n      \n    } else if (functionName === 'create_appointment') {\n      formattedResponse.summary = `Agendamento realizado`;\n      formattedResponse.data = {\n        id: responseData.id,\n        type: responseData.type,\n        dateTime: responseData.dateTime || responseData.date_time,\n        status: responseData.status,\n        message: 'Agendamento confirmado'\n      };\n      \n    } else if (functionName === 'create_tutor') {\n      formattedResponse.summary = `Tutor cadastrado`;\n      formattedResponse.data = {\n        id: responseData.id,\n        name: responseData.name,\n        cpf: responseData.cpf,\n        email: responseData.email,\n        message: 'Tutor cadastrado com sucesso'\n      };\n      \n    } else {\n      // A√ß√£o gen√©rica\n      formattedResponse.summary = 'A√ß√£o realizada com sucesso';\n      formattedResponse.data = responseData;\n    }\n    \n  } else {\n    // Erro na a√ß√£o\n    formattedResponse.success = false;\n    formattedResponse.summary = 'Erro ao executar a√ß√£o';\n    formattedResponse.data = {\n      error: input.error || input.message || 'Erro desconhecido',\n      details: input\n    };\n  }\n}\n\n// ========================================\n// RETORNA RESPOSTA FORMATADA\n// ========================================\nreturn {\n  json: formattedResponse\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1168,
        -48
      ],
      "id": "2a5a12f8-511e-419e-a3aa-17e378b97512",
      "name": "Format-Response"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.intent }}",
                    "rightValue": "=QUERY",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "7ac13201-82dc-4546-9592-bd24d56e82e3"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5fbd9867-8057-4c82-8cff-a8dcabd0d9d2",
                    "leftValue": "={{ $json.intent }}",
                    "rightValue": "ACTION",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -1776,
        48
      ],
      "id": "f355c83b-16cf-4fbb-8f01-954a0b57735b",
      "name": "Switch"
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "SMART AGENT1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Context": {
      "main": [
        [
          {
            "node": "Route by Role",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Role": {
      "main": [
        [
          {
            "node": "USUARIO Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "TUTOR Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "VETERINARIO Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ADMIN Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Agent Response": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "SMART AGENT1",
            "type": "ai_languageModel",
            "index": 1
          },
          {
            "node": "SMART AGENT2",
            "type": "ai_languageModel",
            "index": 1
          },
          {
            "node": "USUARIO Agent",
            "type": "ai_languageModel",
            "index": 1
          },
          {
            "node": "TUTOR Agent",
            "type": "ai_languageModel",
            "index": 1
          },
          {
            "node": "VETERINARIO Agent",
            "type": "ai_languageModel",
            "index": 1
          },
          {
            "node": "ADMIN Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Postgres Chat Memory9": {
      "ai_memory": [
        [
          {
            "node": "SMART AGENT1",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "SMART AGENT2",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "USUARIO Agent",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "TUTOR Agent",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "VETERINARIO Agent",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "ADMIN Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Webhook2": {
      "main": [
        [
          {
            "node": "Extract Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "xAI Grok Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "SMART AGENT1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "SMART AGENT2",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "USUARIO Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "TUTOR Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "VETERINARIO Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "ADMIN Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Format-Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request4": {
      "main": [
        [
          {
            "node": "Format-Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SMART AGENT1": {
      "main": [
        [
          {
            "node": "Process Agent Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "USUARIO Agent": {
      "main": [
        [
          {
            "node": "Process Agent Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TUTOR Agent": {
      "main": [
        [
          {
            "node": "Process Agent Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VETERINARIO Agent": {
      "main": [
        [
          {
            "node": "Process Agent Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADMIN Agent": {
      "main": [
        [
          {
            "node": "Process Agent Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SMART AGENT2": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format-Response": {
      "main": [
        [
          {
            "node": "SMART AGENT2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "7b231313465b4b56abc040e1ee6699b89ffde13a1618d023c42b1ed91cd395de"
  }
}